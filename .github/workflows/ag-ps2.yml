# Adapted from GitHub Actions MWE for Docker containers
# https://docs.github.com/en/actions/creating-actions/creating-a-docker-container-action
# Started as main.yml in root folder

name: AutoGrader-PS2   # Shows in the 'Workflows' section (left sidebar) of the GitHub Actions tab

on:                             # What is going to trigger this Workflow?
  push:
    branches: [ ps2 ]

jobs:                           # What actually needs done? 1+ jobs can be added, will run in parallel by default
  ag-ps2:                       # Name for your consumption only: is not obviously exposed anywhere
    name: 'Autograding PS2'   # Shows in the 'Jobs' section (left sidebar) of the Actions>Runs view
    runs-on: ubuntu-latest
    steps:
      # To use this repository's private action,
      # you must check out the repository
      - name: '`Checkout` hook (standard) - REQd for EACH local action'    # Shows as a foldable/expandable entry in the Runs log interface
        uses: actions/checkout@v2

      - id: copy-answers-to-home
        name: 'Custom Step [1]: Move answers to persistent HOME'
        shell: bash
        # run: echo "${GITHUB_ACTION_PATH}"
        run: |
          echo "GitHub Action filesystem"
          echo "GH Workspace for local repo:"
          tree -L 2 "${GITHUB_WORKSPACE}"
          cp -r "${GITHUB_WORKSPACE}/${GITHUB_ACTOR}" "${HOME}/${GITHUB_ACTOR}"
        # echo "GH Home:"
        # tree -L 2 "${HOME}"
        # echo "GH Actions folder?:"
        # tree -L 2 "${GITHUB_WORKSPACE}/../../_actions/actions/"

      - id: fetch-test-suite-from-irepo
        name: 'Custom Step [2]: Go grab testing suite from instructor repo'
        uses: actions/checkout@v2
        with:
          repository: TSSlade/autograder_secrets   # The (private) repo where our data is living
          ref: ps2                                  # The specific branch to be checked out
          token: ${{ secrets.w241_autograder }}     # This PAT needs to be configured in the src repo (i.e. the one mentioned 2 lines up)

      - id: copy-suite-to-home
        name: "Custom Step [3]: Moving payload to persistent HOME"
        shell: bash
        run: |
          cp -r "${GITHUB_WORKSPACE}/ps2" "${HOME}/ps2"
          mkdir "${HOME}/ps2/student"
          cp -r "${HOME}/${GITHUB_ACTOR}" "${HOME}/ps2/student/${GITHUB_ACTOR}"
          echo "GH HOME:"
          tree -L 3 "${HOME}"

      - id: push-home-as-artifact
        name: 'Custom Step [4]: Stashing the assets where we can later retrieve them'
        uses: actions/upload-artifact@v2
        with:
          name: testing-suite-pkg
          path: "/home/runner/ps2/"
          retention-days: 1

      - name: '`Checkout` hook (standard) - REQd for EACH local action'    # Shows as a foldable/expandable entry in the Runs log interface
        uses: actions/checkout@v2

      - id: docker-up
        name: 'Custom Step [5]: Spinning up Docker Container via AG/action.yml'
        uses: ./.github/actions/AG                  # Runs DockerUp.sh at the end...

      - id: pull-artifact
        name: 'Custom Step [6]: Retrieving the assets we earlier stored'
        uses: actions/download-artifact@v2
        with:
          name: testing-suite-pkg
          path: "./ps2"

      - id: execute-testing-suite
        name: 'Custom Step [7]: Running test suite'
        shell: bash
        # run: echo "${GITHUB_ACTION_PATH}"
        run: |
          echo "Currently in:" `pwd`
          tree -L 2 .
          echo 'cp -r "./ps2" "${HOME}/ps2"'
          cp -r "./ps2" "${HOME}/ps2"
          echo "Confirming successful:"
          cd "${HOME}"
          tree -L 2 .
          echo 'cp -r "${GITHUB_WORKSPACE}/${GITHUB_ACTOR}/" "${HOME}/ps2/student/${GITHUB_ACTOR}/"'
          cp -r "${GITHUB_WORKSPACE}/${GITHUB_ACTOR}/" "${HOME}/ps2/student/${GITHUB_ACTOR}/"
          echo "Confirming successful:"
          tree -L 2 "${HOME}/ps2/student/"
          cd "${HOME}/ps2"
          echo "Currently in:" `pwd`
          tree -L 2 .
          cp -r "./student/${GITHUB_ACTOR}/questions/" "./answers/"
          Rscript -e "knitr::purl('./ps2_answers.Rmd')"
          Rscript -e "testthat::test_file('test_ps2_answers.R')" >> test_results.md
          cat test_results.md
          echo "Finished with ${GITHUB_ACTOR}"

  delete-artifacts:
    runs-on: ubuntu-latest
    steps:
      - uses: kolpav/purge-artifacts-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          # expire-in: 7days # Set this to 0 to delete all artifacts
          expire-in: 0 # Set this to 0 to delete all artifacts


# cleanup_job:
#     needs: [your_last_job]
#     if: always()
#     runs-on: ubuntu-latest
#     steps:
#     - name: call webhook to delete artifacts
#       env:
#         FOR_WEBHOOKS_SECRET: ${{ secrets.FOR_WEBHOOKS_SECRET }}
#       run: |
#         echo "::add-mask::$FOR_WEBHOOKS_SECRET"
#         curl --verbose --fail --show-error --location --request POST "https://api.github.com/repos/$GITHUB_REPOSITORY/dispatches" --header "Authorization: token $FOR_WEBHOOKS_SECRET" --header 'Content-Type: application/json' --header 'Accept: application/vnd.github.everest-preview+json' --data-raw "{ \"event_type\": \"delete_all_artifacts\", \"client_payload\": {\"parent_runid\": \"$GITHUB_RUN_ID\", \"parent_repo\": \"$GITHUB_REPOSITORY\"} }"