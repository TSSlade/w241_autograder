# Adapted from GitHub Actions MWE for Docker containers
# https://docs.github.com/en/actions/creating-actions/creating-a-docker-container-action
# Started as main.yml in root folder

name: AutoGrader-PS2   # Shows in the 'Workflows' section (left sidebar) of the GitHub Actions tab

on:                             # What is going to trigger this Workflow?
  push:
    branches: [ ps2 ]

jobs:                           # What actually needs done? 1+ jobs can be added, will run in parallel by default
  ag-ps2:                       # Name for your consumption only: is not obviously exposed anywhere
    name: 'Autograding PS2'   # Shows in the 'Jobs' section (left sidebar) of the Actions>Runs view
    runs-on: ubuntu-latest
    container: dalexhughes/w241
    steps:
      # To use this repository's private action,
      # you must check out the repository
      - name: 'Running -Checkout- hook'    #  (Standard) - REQd for EACH local action. These names shows as a foldable/expandable entry in the Runs log interface
        uses: actions/checkout@v2

      - id: copy-answers-to-home
        name: 'Custom Step [1]: Move student answers to safe HOME'
        shell: bash
        run: |
          sudo apt-get -qq install tree
          mv "${GITHUB_WORKSPACE}/${GITHUB_ACTOR}/" "${HOME}/${GITHUB_ACTOR}/"

      - id: fetch-test-suite-from-irepo
        name: 'Custom Step [2]: Go grab testing suite from instructor repo'
        uses: actions/checkout@v2
        with:
          repository: TSSlade/autograder_secrets   # The (private) repo where our data is living
          ref: ps2                                  # The specific branch to be checked out
          token: ${{ secrets.w241_autograder }}     # This PAT needs to be configured in the src repo (i.e. the one mentioned 2 lines up)

      - id: staging-student-work
        name: "Custom Step [3]: Retrieve student's work from storage, stage in testing area"
        shell: bash
        run: |
          mkdir "${GITHUB_WORKSPACE}/student"
          mv "${HOME}/${GITHUB_ACTOR}/" "${GITHUB_WORKSPACE}/student/${GITHUB_ACTOR}/"
          mkdir ${GITHUB_WORKSPACE}/ps2/testing_center
          cp ${GITHUB_WORKSPACE}/student/${GITHUB_ACTOR}/questions/* "${GITHUB_WORKSPACE}/ps2/testing_center/answers"
          echo "Student's work should now be in 'GITHUB_WORKSPACE':"
          tree -L 4 "${GITHUB_WORKSPACE}"

      - id: staging-testing-suite
        name: 'Custom Step [4]: Setting up testing suite'
        shell: bash
        run: |
          mv "${GITHUB_WORKSPACE}/ps2/ps2_answers.R" "${GITHUB_WORKSPACE}/ps2/testing_center/ps2_answers.R"
          mv "${GITHUB_WORKSPACE}/ps2/ps2_answers.Rmd" "${GITHUB_WORKSPACE}/ps2/testing_center/ps2_answers.Rmd"
          mv "${GITHUB_WORKSPACE}/ps2/alex.R" "${GITHUB_WORKSPACE}/ps2/testing_center/alex.R"
          chmod +x "${GITHUB_WORKSPACE}/ps2/testing_center/alex.R"
          echo "Final pre-testing status:"
          tree -L 4

      - id: running-testing-suite
        name: 'Custom Step [5]: Executing testing suite'
        shell: bash
        run: |
          cd "./ps2/testing_center"
          echo "Currently in:" `pwd`
          tree -L 4 ${GITHUB_WORKSPACE}
          Rscript -e "library(knitr); library(testthat); loadedNamespaces(); source('./alex.R');"
          echo "Finished with ${GITHUB_ACTOR}"

# delete-artifacts:
#   runs-on: ubuntu-latest
#   steps:
#     - uses: kolpav/purge-artifacts-action@v1
#       with:
#         token: ${{ secrets.GITHUB_TOKEN }}
#         # expire-in: 7days # Set this to 0 to delete all artifacts
#         expire-in: 0 # Set this to 0 to delete all artifacts


# cleanup_job:
#     needs: [your_last_job]
#     if: always()
#     runs-on: ubuntu-latest
#     steps:
#     - name: call webhook to delete artifacts
#       env:
#         FOR_WEBHOOKS_SECRET: ${{ secrets.FOR_WEBHOOKS_SECRET }}
#       run: |
#         echo "::add-mask::$FOR_WEBHOOKS_SECRET"
#         curl --verbose --fail --show-error --location --request POST "https://api.github.com/repos/$GITHUB_REPOSITORY/dispatches" --header "Authorization: token $FOR_WEBHOOKS_SECRET" --header 'Content-Type: application/json' --header 'Accept: application/vnd.github.everest-preview+json' --data-raw "{ \"event_type\": \"delete_all_artifacts\", \"client_payload\": {\"parent_runid\": \"$GITHUB_RUN_ID\", \"parent_repo\": \"$GITHUB_REPOSITORY\"} }"